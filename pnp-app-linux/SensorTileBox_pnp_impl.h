/************************************************************************************************
 * This code was automatically generated by Digital Twin Code Generator tool 0.6.8.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 *
 * Generated Date: 6/2/2020
 ***********************************************************************************************/

#ifndef SensorTileBox_PNP_IMPL
#define SensorTileBox_PNP_IMPL

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include "azure_c_shared_utility/xlogging.h"
#include "azure_c_shared_utility/threadapi.h"
#include "parson.h"

/**
* Type definition
*/

typedef struct SensorTile_Box_ACCELERO_TAG
{
    int X;

    int Y;

    int Z;

} SensorTile_Box_ACCELERO;

typedef struct SensorTile_Box_GYRO_TAG
{
    int X;

    int Y;

    int Z;

} SensorTile_Box_GYRO;

typedef struct SensorTile_Box_MEGNETO_TAG
{
    int X;

    int Y;

    int Z;

} SensorTile_Box_MEGNETO;

/**
* Device telemetries related methods.
*/

float SensorTile_Box_Telemetry_ReadTemperature();

float SensorTile_Box_Telemetry_ReadPressure();

float SensorTile_Box_Telemetry_ReadHumidity();

void SensorTile_Box_Telemetry_ReadAccelero(SensorTile_Box_ACCELERO * accelero);

void SensorTile_Box_Telemetry_ReadGyro(SensorTile_Box_GYRO * gyro);

void SensorTile_Box_Telemetry_ReadMegneto(SensorTile_Box_MEGNETO * megneto);

/**
* Device properties related methods.
*/

char* DeviceInformation_Property_GetManufacturer();

char* DeviceInformation_Property_GetModel();

char* DeviceInformation_Property_GetSwVersion();

char* DeviceInformation_Property_GetOsName();

char* DeviceInformation_Property_GetProcessorArchitecture();

char* DeviceInformation_Property_GetProcessorManufacturer();

long DeviceInformation_Property_GetTotalStorage();

long DeviceInformation_Property_GetTotalMemory();

/**
* Device commands related methods.
*/

// Callbacks to handle the confirmation result of sending telemetry
void SendTelemetry_Succeeded_Callback(const char* interfaceName);
void SendTelemetry_Error_Callback(const char* interfaceName);

// Callbacks to handle the confirmation result of reporting property
void ReportProperty_Succeeded_Callback(const char* interfaceName, const char* propertyName);
void ReportProperty_Error_Callback(const char* interfaceName, const char* propertyName);

#ifdef __cplusplus
}
#endif

#endif // SensorTileBox_PNP_IMPL
